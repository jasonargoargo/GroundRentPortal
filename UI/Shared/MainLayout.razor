@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@namespace UI.Shared
<PageTitle>Ground Rent Portal</PageTitle>
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="currentMudTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
@if (_hasThemeCookiesLoaded)
{
	<MudLayout>
		<MudAppBar>
			<MudIconButton Style="color: white;" Icon="@Icons.Filled.Menu" OnClick="() => _isNavigationMenuOpened = !_isNavigationMenuOpened" />
			<MudText Typo="Typo.h5">Ground Rent Portal</MudText>
		</MudAppBar>
		<NavigationMenuDrawer IsDrawerOpen="_isNavigationMenuOpened" OnIsDarkTheme="UpdateIsDarkTheme"
						  OnMudThemeChanged="SwitchTheme" IsDarkThemeDisabled="isMidThemeSelected"
						  IsMidThemeDisabled="_isDarkMode" IsMidThemeActive="isMidThemeSelected" HasDetectedDarkTheme="_isDarkMode" />
		<MudMainContent>
			@Body
		</MudMainContent>
	</MudLayout>
}
else
{
	<div class="container-spinner d-flex flex-column align-items-center">
		<MudProgressCircular Color="Color.Default" Indeterminate="true" />
		<MudText Color="Color.Default" Typo="Typo.h6">Loading Theme, please wait...</MudText>
	</div>
}


@code {
	private bool _isDarkMode;
	private MudThemeProvider? _mudThemeProvider;
	private bool _isNavigationMenuOpened { get; set; } = false;
	private MudTheme? currentMudTheme { get; set; }
	private bool isMidThemeSelected { get; set; }
	private bool _hasThemeCookiesLoaded = default;

	protected override void OnInitialized()
	{
		currentMudTheme = MainTheme;
		base.OnInitialized();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && _mudThemeProvider is not null)
		{
			_isDarkMode = await _mudThemeProvider.GetSystemPreference();
			await HandleDarkThemeCookie();
			await HandleThemeCookies();
			await Task.Delay(500);
			_hasThemeCookiesLoaded = true;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task HandleThemeCookies()
	{
		var currentThemeCookie = await jsRuntime.InvokeAsync<string>("getTheme");

		if (currentThemeCookie == string.Empty)
		{
			currentMudTheme = MainTheme;
		}

		if (currentThemeCookie.Contains("MainTheme"))
		{
			currentMudTheme = MainTheme;
		}
		if (currentThemeCookie.Contains("MidTheme") && !_isDarkMode)
		{
			isMidThemeSelected = true;
			currentMudTheme = MidTheme;
		}
	}

	private async Task HandleDarkThemeCookie()
	{
		var currentDarkThemeCookie = await jsRuntime.InvokeAsync<string>("getTheme");

		if (currentDarkThemeCookie == string.Empty)
		{
			_isDarkMode = false;
		}

		if (currentDarkThemeCookie.Contains("isDarkMode=true"))
		{
			_isDarkMode = true;
		}
		if (currentDarkThemeCookie.Contains("isDarkMode=false"))
		{
			_isDarkMode = false;
		}
	}

	private void UpdateIsDarkTheme(bool value)
	{
		jsRuntime.InvokeVoidAsync("setDarkModeCookie", value);
		_isDarkMode = value;
	}

	private void SwitchTheme(bool value)
	{
		isMidThemeSelected = value;

		if (isMidThemeSelected)
		{
			currentMudTheme = MidTheme;
			jsRuntime.InvokeVoidAsync("setThemeCookie", "MidTheme");
		}
		else
		{
			currentMudTheme = MainTheme;
			jsRuntime.InvokeVoidAsync("setThemeCookie", "MainTheme");
		}
	}

	MudTheme MainTheme = new MudTheme()
		{
			Palette = new Palette()
			{
				Primary = "#be894a",
				Secondary = "#4d4d4d",
				AppbarBackground = "#be894a",
			},
			PaletteDark = new PaletteDark()
			{
				Primary = "#0099f5",
				PrimaryDarken = "#008cdf",
				Secondary = "#000000",
				TextPrimary = "#ffffff",
				TextSecondary = "#ffffff",
				DrawerText = "#ffffff",
				AppbarText = "#fff",
				AppbarBackground = "#333333",
				DrawerBackground = "#303535",
				Background = "#292828"
			},
			LayoutProperties = new LayoutProperties()
			{
				DrawerWidthLeft = "260px",
				DrawerWidthRight = "300px"
			}
		};

	MudTheme MidTheme = new()
		{
			Palette = new Palette()
			{
				Primary = "#ff4022",
				PrimaryDarken = "#ff2e0e",
				TextPrimary = "#fff",				
				Secondary = "#4d4d4d",
				TextSecondary = "#fff",
				AppbarBackground = "#ff4022",
				DrawerBackground = "#2b2a2a",
				DrawerText = "#fff",
				Background = "#3e3e3e"
			},
			LayoutProperties = new LayoutProperties()
			{
				DrawerWidthLeft = "260px",
				DrawerWidthRight = "300px"
			}
		};
}