@page "/processAddress"
@attribute [Authorize]
@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Models
@inject IDataContext dataContext
@inject IGroundRentPortalDataServiceFactory testDataServiceFactory

@if(userState is not null)
{
    @if (addressesLoaded)
    {
        <p>Addresses are loaded.</p>
        <div class="container">
            <div hidden="@addressSubmitted">
                <EditForm EditContext="editContext" OnValidSubmit="HandleOnSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="row">
                        <div class="col gy-3">
                            <label>@userState.User.Identity.Name is currently processing @addressToBeInputModel.AccountId</label>
                        </div>
                    </div>
                    
                    <div class="col gy-3">
                        <label>Payment Amount</label>
                        <InputNumber @bind-Value="addressToBeInputModel.PaymentAmount" class="form-control" required></InputNumber>
                    </div>
                    <div class="col gy-3">
                        <label>Payment Frequency</label>
                        <InputSelect @bind-Value="addressToBeInputModel.GroundRentPaymentFrequency" class="form-control" required>
                            <option></option>
                            <option value="@AddressModel.PaymentFrequency.Annual" onselect="@(() => TogglePaymentFrequencyAnnual)">Annual</option>
                            <option value="@AddressModel.PaymentFrequency.SemiAnnual" onselect="@(() => TogglePaymentFrequencySemiAnnual)">Semi-Annual</option>
                            <option value="@AddressModel.PaymentFrequency.Quarterly" onselect="@(() => TogglePaymentFrequencyQuarterly)">Quarterly</option>
                            <option value="@AddressModel.PaymentFrequency.Other" onselect="@(() => TogglePaymentFrequencyOther)">Other</option>
                        </InputSelect>
                    </div>
                    @if(paymentFrequencyAnnual)
                    {
                        <div class="col gy-3">
                            <label>Annual Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateAnnual" class="form-control" bind:event="onselect"></InputDate>
                        </div>
                    }
                    @if (paymentFrequencySemiAnnual)
                    {
                        <div class="col gy-3">
                            <label>Semi-Annual 1 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateSemiAnnual1" class="form-control"></InputDate>
                        </div>
                        <div class="col gy-3">
                            <label>Semi-Annual 2 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateSemiAnnual2" class="form-control"></InputDate>
                        </div>
                    }
                    @if (paymentFrequencyQuarterly)
                    {
                        <div class="col gy-3">
                            <label>Quarterly 1 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateQuarterly1" class="form-control"></InputDate>
                        </div>
                        <div class="col gy-3">
                            <label>Quarterly 2 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateQuarterly2" class="form-control"></InputDate>
                        </div>
                        <div class="col gy-3">
                            <label>Quarterly 3 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateQuarterly3" class="form-control"></InputDate>
                        </div>
                        <div class="col gy-3">
                            <label>Quarterly 4 Date</label>
                            <InputDate @bind-Value="addressToBeInputModel.PaymentDateQuarterly4" class="form-control"></InputDate>
                        </div>
                    }
                    @if (paymentFrequencyOther)
                    {
                        <div class="col gy-3">
                            <label>Other Date</label>
                            <InputText @bind-Value="addressToBeInputModel.PaymentDateOther" class="form-control"></InputText>
                        </div>
                    }
                    <div class="row">
                        <div class="col gy-3">
                            <p>Is data legible?</p>
                            <InputRadioGroup @bind-Value="isLegibleRadio" class="form-control" onselect="@(() => IsLegibleRadioSelect)" required>
                                <InputRadio Value="IsLegibleRadio.Yes">Yes</InputRadio>
                                <InputRadio Value="IsLegibleRadio.No">No</InputRadio>
                            </InputRadioGroup>
                        </div>
                    </div>
                    @if(isLegibleRadio = IsLegibleRadio.No)
                    {
                        <div class="row">
                            <div class="col gy-3">
                                <InputSelect @bind-Value="addressToBeInputModel.NotLegibleType" class="form-select" onselect=""
                                    foreach(var option in Enum.GetValues(typeof(AddressModel.NotLegible)))
                                    {
                                        <option value="@option">@option</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col gy-3">
                            <button class="btn btn-primary" type="submit" disabled="@isSubmitting">Submit</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <p>Loading addresses...</p>
    }
}
else
{
    <p>You are not authorized. Please log in or contact your manager.</p>
}

@code {
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private AuthenticationState? userState;
    [Parameter] public AddressModel addressToBeInputModel { get; set; }
    private List<AddressModel> UnprocessedAddressList = new();
    private List<AddressModel> UnverifiedAddressList = new();
    private List<AddressModel> AddressList = new();


    [Parameter] public EventCallback AddressProcessed { get; set; }
    private int UnprocessedAddressListAmount { get; set; } = 100;
    private int UnverifiedAddressListAmount;
    private bool addressesLoaded { get; set; } = false;
    private bool addressSubmitted { get; set; } = false;
    private bool isSubmitting { get; set; } = false;
    private enum IsLegibleRadio { Yes, No }
    private IsLegibleRadio isLegibleRadio;
    private bool dataServiceResult { get; set; }
    private bool paymentFrequencyAnnual { get; set; }
    private bool paymentFrequencySemiAnnual { get; set; }
    private bool paymentFrequencyQuarterly { get; set; }
    private bool paymentFrequencyOther { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userState = await authenticationState;
        editContext = new(addressToBeInputModel);
        editContext.OnFieldChanged += EditContextPaymentFrequencyOnFieldChanged;
        validationMessageStore = new(editContext);
        editContext.OnValidationRequested += (s, e) => validationMessageStore.Clear();

        CalculateListAmounts();
        await LoadAddressList();
        addressesLoaded = true;
        validationMessageStore.Clear();
        editContext.NotifyValidationStateChanged();
        this.StateHasChanged();
    }
    protected override Task OnParametersSetAsync()
    {
        if(addressToBeInputModel is null)
        {
            addressToBeInputModel = new();
        }
        editContext = new(this.addressToBeInputModel);
        editContext.OnFieldChanged += EditContextAddressOnFieldChanged;
        editContext.OnValidationRequested += (s, e) => validationMessageStore.Clear();
        validationMessageStore = new ValidationMessageStore(editContext);
        return Task.CompletedTask;
    }
    private void CalculateListAmounts()
    {
        double percentage = UnprocessedAddressListAmount * 0.1;
        UnverifiedAddressListAmount = (int)Math.Round(percentage, MidpointRounding.AwayFromZero);
    }
    private async Task LoadAddressList()
    {
        addressesLoaded = false;
        AddressList = new();
        UnprocessedAddressList = await LoadUnprocessedAddresses();
        UnverifiedAddressList = await LoadUnverifiedAddresses();
        AddressList.AddRange(UnprocessedAddressList);
        AddressList.AddRange(UnverifiedAddressList);
        UnprocessedAddressList = new();
        UnverifiedAddressList = new();
        foreach(var address in AddressList)
        {
            addressToBeInputModel = address;
        }
        addressesLoaded = true;
    }
    private async Task<List<AddressModel>> LoadUnprocessedAddresses()
    {
        using (var uow = dataContext.CreateUnitOfWork())
        {
            var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
            UnprocessedAddressList = await testDataService.ReadByCountyWhereIsLegibleTrueAndIsProcessedFalse(UnprocessedAddressListAmount, "BaltimoreCity");
        }
        return UnprocessedAddressList;
    }
    private async Task<List<AddressModel>> LoadUnverifiedAddresses()
    {
        using (var uow = dataContext.CreateUnitOfWork())
        {
            var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
            UnverifiedAddressList = await testDataService.ReadByVerificationPercentageWhereIsLegibleTrueAndIsProcessedTrue(UnverifiedAddressListAmount);
        }
        return UnverifiedAddressList;
    }
    private async Task HandleOnSubmit()
    {
        if(isSubmitting)
        {
            return;
        }
        if(editContext.Validate())
        {
            isSubmitting = true;
            AddressModel addressToDbModel = new();
            if (addressToBeInputModel.IsProcessed is true)
            {
                addressToDbModel.IsVerified = true;
                addressToDbModel.UserWhoVerified = userState.User.Identity.Name;
                addressToDbModel.PaymentAmount = addressToBeInputModel.PaymentAmount;
                addressToDbModel.GroundRentPaymentFrequency = addressToBeInputModel.GroundRentPaymentFrequency;
                addressToDbModel.PaymentDateAnnual = addressToBeInputModel.PaymentDateAnnual;
                addressToDbModel.PaymentDateSemiAnnual1 = addressToBeInputModel.PaymentDateSemiAnnual1;
                addressToDbModel.PaymentDateSemiAnnual2 = addressToBeInputModel.PaymentDateSemiAnnual2;
                addressToDbModel.PaymentDateQuarterly1 = addressToBeInputModel.PaymentDateQuarterly1;
                addressToDbModel.PaymentDateQuarterly2 = addressToBeInputModel.PaymentDateQuarterly2;
                addressToDbModel.PaymentDateQuarterly3 = addressToBeInputModel.PaymentDateQuarterly3;
                addressToDbModel.PaymentDateQuarterly4 = addressToBeInputModel.PaymentDateQuarterly4;
                addressToDbModel.PaymentDateOther = addressToBeInputModel.PaymentDateOther;
                addressToDbModel.IsLegible = addressToBeInputModel.IsLegible;
                addressToDbModel.NotLegibleType = addressToBeInputModel.NotLegibleType;

                using (var uow = dataContext.CreateUnitOfWork())
                {
                    var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
                    dataServiceResult = await testDataService.Update(addressToDbModel);
                }
                if (dataServiceResult is false)
                {
                    validationMessageStore.Add(editContext.Field(""), "Could not process.");
                }
            }
            if (addressToBeInputModel.IsProcessed is false)
            {
                addressToDbModel.IsProcessed = true;
                addressToDbModel.UserWhoVerified = userState.User.Identity.Name;
                addressToDbModel.PaymentAmount = addressToBeInputModel.PaymentAmount;
                addressToDbModel.GroundRentPaymentFrequency = addressToBeInputModel.GroundRentPaymentFrequency;
                addressToDbModel.PaymentDateAnnual = addressToBeInputModel.PaymentDateAnnual;
                addressToDbModel.PaymentDateSemiAnnual1 = addressToBeInputModel.PaymentDateSemiAnnual1;
                addressToDbModel.PaymentDateSemiAnnual2 = addressToBeInputModel.PaymentDateSemiAnnual2;
                addressToDbModel.PaymentDateQuarterly1 = addressToBeInputModel.PaymentDateQuarterly1;
                addressToDbModel.PaymentDateQuarterly2 = addressToBeInputModel.PaymentDateQuarterly2;
                addressToDbModel.PaymentDateQuarterly3 = addressToBeInputModel.PaymentDateQuarterly3;
                addressToDbModel.PaymentDateQuarterly4 = addressToBeInputModel.PaymentDateQuarterly4;
                addressToDbModel.PaymentDateOther = addressToBeInputModel.PaymentDateOther;
                addressToDbModel.IsLegible = addressToBeInputModel.IsLegible;
                addressToDbModel.NotLegibleType = addressToBeInputModel.NotLegibleType;

                using (var uow = dataContext.CreateUnitOfWork())
                {
                    var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
                    dataServiceResult = await testDataService.Update(addressToDbModel);
                }
                if (dataServiceResult is false)
                {
                    validationMessageStore.Add(editContext.Field(""), "Could not process.");
                }
            }
            editContext.NotifyValidationStateChanged();
            isSubmitting = false;
            this.StateHasChanged();
            return;
        }
    }
    private void IsLegibleRadioSelect()
    {
        if(isLegibleRadio == IsLegibleRadio.Yes)
        {
            addressToBeInputModel.IsLegible = true;
        }
        if (isLegibleRadio == IsLegibleRadio.No)
        {
            addressToBeInputModel.IsLegible = false;
        }
        editContext.OnFieldChanged += EditContextAddressOnFieldChanged;
    }
    private void NotLegibleTypeSelect()
    {
        if (isLegibleRadio == IsLegibleRadio.No)
        {
            addressToBeInputModel.NotLegibleType = AddressModel.NotLegible;
        }
        editContext.OnFieldChanged += EditContextAddressOnFieldChanged;
    }
    private void EditContextAddressOnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        AddressProcessed.InvokeAsync();
    }
    private void EditContextPaymentFrequencyOnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "GroundRentPaymentFrequency")
        {
            if(addressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
            {
                TogglePaymentFrequencyAnnual();
                addressToBeInputModel.PaymentDateSemiAnnual1 = null;
                addressToBeInputModel.PaymentDateSemiAnnual2 = null;
                addressToBeInputModel.PaymentDateQuarterly1 = null;
                addressToBeInputModel.PaymentDateQuarterly2 = null;
                addressToBeInputModel.PaymentDateQuarterly3 = null;
                addressToBeInputModel.PaymentDateQuarterly4 = null;
                addressToBeInputModel.PaymentDateOther = null;
            }
            else if (addressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
            {
                TogglePaymentFrequencySemiAnnual();
                addressToBeInputModel.PaymentDateAnnual = null;
                addressToBeInputModel.PaymentDateQuarterly1 = null;
                addressToBeInputModel.PaymentDateQuarterly2 = null;
                addressToBeInputModel.PaymentDateQuarterly3 = null;
                addressToBeInputModel.PaymentDateQuarterly4 = null;
                addressToBeInputModel.PaymentDateOther = null;
            }
            else if (addressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
            {
                TogglePaymentFrequencyQuarterly();
                addressToBeInputModel.PaymentDateAnnual = null;
                addressToBeInputModel.PaymentDateSemiAnnual1 = null;
                addressToBeInputModel.PaymentDateSemiAnnual2 = null;
                addressToBeInputModel.PaymentDateOther = null;
            }
            else if (addressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
            {
                TogglePaymentFrequencyOther();
                addressToBeInputModel.PaymentDateAnnual = null;
                addressToBeInputModel.PaymentDateSemiAnnual1 = null;
                addressToBeInputModel.PaymentDateSemiAnnual2 = null;
                addressToBeInputModel.PaymentDateQuarterly1 = null;
                addressToBeInputModel.PaymentDateQuarterly2 = null;
                addressToBeInputModel.PaymentDateQuarterly3 = null;
                addressToBeInputModel.PaymentDateQuarterly4 = null;
            }
        }
    }
    private void TogglePaymentFrequencyAnnual()
    {
        paymentFrequencyAnnual = true;
        paymentFrequencySemiAnnual = false;
        paymentFrequencyQuarterly = false;
        paymentFrequencyOther = false;
    }
    private void TogglePaymentFrequencySemiAnnual()
    {
        paymentFrequencyAnnual = false;
        paymentFrequencySemiAnnual = true;
        paymentFrequencyQuarterly = false;
        paymentFrequencyOther = false;
    }
    private void TogglePaymentFrequencyQuarterly()
    {
        paymentFrequencyAnnual = false;
        paymentFrequencySemiAnnual = false;
        paymentFrequencyQuarterly = true;
        paymentFrequencyOther = false;
    }
    private void TogglePaymentFrequencyOther()
    {
        paymentFrequencyAnnual = false;
        paymentFrequencySemiAnnual = false;
        paymentFrequencyQuarterly = false;
        paymentFrequencyOther = true;
    }
}
