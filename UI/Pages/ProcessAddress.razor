@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Models
@using UI.Pages.ProcessAddressComponents
@inject IDataContext dataContext
@inject IGroundRentPortalDataServiceFactory testDataServiceFactory
@inject ILogger<ProcessAddress> logger
@inject ISnackbar snackbarNotification
@attribute [Authorize]
@page "/processaddress"
@namespace UI.Pages

@if (userState is not null && addressesLoaded)
{
	<div class="container">
		<div hidden="@addressSubmitted">
			<MudText Class="mt-2" Typo="Typo.h4">Process Address</MudText>
			<EditForm Model="AddressToBeInputModel" OnValidSubmit="HandleOnSubmit" OnInvalidSubmit="HandleInvalidSubmit">
				<DataAnnotationsValidator />
				<MudText Class="mt-2">@userState.User.Identity?.Name is currently processing @AddressToBeInputModel?.AccountId</MudText>
				<MudText Color="Color.Primary">Addresses are loaded.</MudText>
				<CascadingValue Value="AddressToBeInputModel">
					<PaymentAmountField />
					<PaymentFrequencyField />
					<DataLegibleRadio />
				</CascadingValue>				
				<FormSubmitButton />
				@if (isValidationSuccessful)
				{
					snackbarNotification.Add("Submission successful!", Severity.Success);
					<MudText Color="Color.Success" Typo="Typo.caption">Form submission successful!</MudText>
				}
				<MudText Color="Color.Error" Typo="Typo.body2">
					<ValidationSummary />
				</MudText>
			</EditForm>
		</div>
	</div>	
}
else
{
	<MudText Color="Color.Error">You are not authorized. Please log in or contact your manager.</MudText>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	private AddressModel addressToDbModel = new();
	private AddressModel originalProcessedAddress = new();
	private ValidationMessageStore? validationMessageStore;
	private bool isValidationSuccessful { get; set; }	
	private AuthenticationState? userState;
	public AddressModel? AddressToBeInputModel { get; set; }
	private List<AddressModel> UnprocessedAddressList = new();
	private List<AddressModel> UnverifiedAddressList = new();
	private List<AddressModel> AddressList = new();
	public EventCallback AddressProcessed { get; set; }
	private int UnprocessedAddressListAmount { get; set; } = 100;
	private int UnverifiedAddressListAmount = default;
	private bool addressesLoaded { get; set; } = false;
	private bool addressSubmitted { get; set; } = false;
	private bool isSubmitting { get; set; } = false;
	private bool dataServiceResult { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			AddressToBeInputModel = new();

			if (authenticationState is not null)
			{
				userState = await authenticationState;
			}

			CalculateListAmounts();
			await LoadAddressList();
			addressesLoaded = true;
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			logger.LogError($"Exception thrown during initilaztion {ex.Message}");
		}
	}

	private void CalculateListAmounts()
	{
		double percentage = UnprocessedAddressListAmount * 0.1;
		UnverifiedAddressListAmount = (int)Math.Round(percentage, MidpointRounding.AwayFromZero);
	}

	private async Task LoadAddressList()
	{
		addressesLoaded = false;
		AddressList = new();
		UnprocessedAddressList = await LoadUnprocessedAddresses();
		UnverifiedAddressList = await LoadUnverifiedAddresses();
		AddressList.AddRange(UnprocessedAddressList);
		AddressList.AddRange(UnverifiedAddressList);
		UnprocessedAddressList = new();
		UnverifiedAddressList = new();

		foreach (var address in AddressList)
		{
			AddressToBeInputModel = address;
		}

		addressesLoaded = true;
	}

	private async Task<List<AddressModel>> LoadUnprocessedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnprocessedAddressList = await testDataService.ReadByCountyWhereIsLegibleTrueAndIsProcessedFalse(UnprocessedAddressListAmount, "BaltimoreCity");
		}

		return UnprocessedAddressList;
	}

	private async Task<List<AddressModel>> LoadUnverifiedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnverifiedAddressList = await testDataService.ReadByVerificationPercentageWhereIsLegibleTrueAndIsProcessedTrue(UnverifiedAddressListAmount);
		}

		return UnverifiedAddressList;
	}

	private void HandleInvalidSubmit() => isValidationSuccessful = false;

	private async Task HandleOnSubmit()
	{	
		if (isSubmitting)
		{			
			return;
		}
		isValidationSuccessful = true;
		isSubmitting = true;		

		if (AddressToBeInputModel?.IsProcessed is true)
		{
			addressToDbModel.AccountId = AddressToBeInputModel.AccountId;
			addressToDbModel.IsProcessed = true;
			addressToDbModel.UserWhoVerified = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel.PaymentAmount;
			addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel.IsLegible;
			addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;			

			if (addressToDbModel.AccountId is not null)
			{
				using (var uow = dataContext.CreateUnitOfWork())
				{
					var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
					originalProcessedAddress = await testDataService.ReadByAccountId(addressToDbModel.AccountId);
				}
			}
			

			if (originalProcessedAddress.GroundRentPaymentFrequency != addressToDbModel.GroundRentPaymentFrequency)
			{
				if (originalProcessedAddress.PaymentDateAnnual != addressToDbModel.PaymentDateAnnual)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateSemiAnnual1 != addressToDbModel.PaymentDateSemiAnnual1)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateSemiAnnual2 != addressToDbModel.PaymentDateSemiAnnual2)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateQuarterly1 != addressToDbModel.PaymentDateQuarterly1)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateQuarterly2 != addressToDbModel.PaymentDateQuarterly2)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateQuarterly3 != addressToDbModel.PaymentDateQuarterly3)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateQuarterly4 != addressToDbModel.PaymentDateQuarterly4)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
				if (originalProcessedAddress.PaymentDateOther != addressToDbModel.PaymentDateOther)
				{
					addressToDbModel.IsVerified = false;
					addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentDate;
				}
			}
			if (originalProcessedAddress.IsLegible != addressToDbModel.IsLegible)
			{
				addressToDbModel.IsVerified = false;
				addressToDbModel.NotVerifiedType = AddressModel.InputType.IsLegible;
				if (originalProcessedAddress.NotLegibleType != addressToDbModel.NotLegibleType)
				{
					addressToDbModel.NotVerifiedType = AddressModel.InputType.NotLegibleType;
				}
			}
			if (originalProcessedAddress.PaymentAmount != addressToDbModel.PaymentAmount)
			{
				addressToDbModel.IsVerified = false;
				addressToDbModel.NotVerifiedType = AddressModel.InputType.PaymentAmount;
			}
			else
			{
				addressToDbModel.IsVerified = true;
			}

			using (var uow = dataContext.CreateUnitOfWork())
			{
				var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
				dataServiceResult = await testDataService.Update(addressToDbModel);
			}
		}

		if (AddressToBeInputModel?.IsProcessed is null || AddressToBeInputModel?.IsProcessed is false)
		{
			addressToDbModel.AccountId = AddressToBeInputModel?.AccountId;
			addressToDbModel.IsProcessed = true;
			addressToDbModel.IsVerified = null;
			addressToDbModel.UserWhoProcessed = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel?.PaymentAmount;						
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel?.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel?.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel?.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel?.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel?.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel?.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel?.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel?.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel?.IsLegible;			

			if (AddressToBeInputModel is not null)
			{
				addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
				addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;
			}

			using (var uow = dataContext.CreateUnitOfWork())
			{
				var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
				dataServiceResult = await testDataService.Update(addressToDbModel);
			}
		}

		isSubmitting = false;
		await InvokeAsync(StateHasChanged);
		return;
	}
}
