@using System.Text.Json
@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Models
@using DataLibrary.Services;
@using UI.Pages.ProcessAddressComponents
@inject IDataContext dataContext
@inject IGroundRentPortalDataServiceFactory testDataServiceFactory
@inject Scraper scraper
@inject ILogger<ProcessAddress> logger
@inject ISnackbar snackbarNotification
@attribute [Authorize]
@page "/processaddress"
@namespace UI.Pages

@if (userState is not null)
{
	<div class="container">
		@if(addressesLoaded && counter <= AddressList.Count)
		{
			<div hidden="@addressSubmitted">
				<MudText Class="mt-2" Typo="Typo.h4">Process Address</MudText>
				<EditForm Model="AddressToBeInputModel" OnValidSubmit="HandleOnSubmit" OnInvalidSubmit="HandleInvalidSubmit">
					<DataAnnotationsValidator />
					<MudText Color="Color.Primary">Addresses successfully loaded.</MudText>
					<MudText Class="mt-2">@userState.User.Identity?.Name is currently processing address id: @AddressToBeInputModel?.AccountId</MudText>
					<MudText Class="mt-2">You have processed @counter addresses out of @AddressList.Count this session.</MudText>
					<CascadingValue Value="AddressToBeInputModel">
						<PaymentAmountField />
						<PaymentFrequencyField OnPaymentFrequencyChanged="UpdatePaymentFrequency" />
						<DataLegibleRadio />
					</CascadingValue>
					<CascadingValue Value="this">
						<FormSubmitButton />
					</CascadingValue>
					@if (isValidationSuccessful)
					{
						snackbarNotification.Add("Submission successful!", Severity.Success);
						<MudText Color="Color.Success" Typo="Typo.caption">Form submission successful!</MudText>
					}
					<MudText Color="Color.Error" Typo="Typo.body2">
						<ValidationSummary />
					</MudText>
				</EditForm>
			</div>
		}
		else
		{
			<MudText>Session finished. Please refresh to start a new session.</MudText>
		}
	</div>
}
else
{
	<MudText Color="Color.Error">You are not authorized. Please log in or contact your manager.</MudText>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	private AddressModel addressToDbModel = new();
	private AddressModel originalProcessedAddress = new();
	private ValidationMessageStore? validationMessageStore;
	private bool isValidationSuccessful { get; set; }
	private AuthenticationState? userState;
	public AddressModel? AddressToBeInputModel { get; set; }
	public AddressModel? OriginalAddressModel { get; set; }
	private List<AddressModel> UnprocessedAddressList = new();
	private List<AddressModel> UnverifiedAddressList = new();
	private List<AddressModel> AddressList = new();
	public EventCallback AddressProcessed { get; set; }
	private int UnprocessedAddressListAmount { get; set; } = 100;
	private int UnverifiedAddressListAmount = default;
	private bool addressesLoaded { get; set; } = false;
	private bool addressSubmitted { get; set; } = false;
	public bool IsSubmitting { get; set; } = false;
	private bool dataServiceResult { get; set; }
	private int counter = 0;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			AddressToBeInputModel = new();

			if (authenticationState is not null)
			{
				userState = await authenticationState;
			}

			await LoadAddressList();
			AddressToBeInputModel = AddressList[0];
			OriginalAddressModel = await LoadOriginalProcessedAddress(AddressList[0].AccountId);
			//await scraper.Scrape(AddressList[0]);
			addressesLoaded = true;
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			logger.LogError($"Exception thrown during initilaztion {ex.Message}");
		}
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender && counter <= AddressList.Count)
		{
			AddressToBeInputModel = AddressList[counter];
			OriginalAddressModel = await LoadOriginalProcessedAddress(AddressList[counter].AccountId);
			await InvokeAsync(StateHasChanged);
		}
		await base.OnAfterRenderAsync(firstRender);
	}
	private void CalculateListAmounts()
	{
		double percentage = UnprocessedAddressListAmount * 0.1;
		UnverifiedAddressListAmount = (int)Math.Round(percentage, MidpointRounding.AwayFromZero);
	}
	private async Task LoadAddressList()
	{
		addressesLoaded = false;
		AddressList = new();
		UnprocessedAddressList = await LoadUnprocessedAddresses();
		UnverifiedAddressList = await LoadUnverifiedAddresses();
		AddressList.AddRange(UnprocessedAddressList);
		AddressList.AddRange(UnverifiedAddressList);
		UnprocessedAddressList = new();
		UnverifiedAddressList = new();
	}
	private async Task<List<AddressModel>> LoadUnprocessedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnprocessedAddressList = await testDataService.ReadByCountyWhereIsLegibleTrueAndIsProcessedFalse(UnprocessedAddressListAmount, "BaltimoreCity");
		}
		return UnprocessedAddressList;
	}
	private async Task<List<AddressModel>> LoadUnverifiedAddresses()
	{
		CalculateListAmounts();
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnverifiedAddressList = await testDataService.ReadByVerificationPercentageWhereIsLegibleTrueAndIsProcessedTrue(UnverifiedAddressListAmount);
		}
		return UnverifiedAddressList;
	}
	private async Task<AddressModel> LoadOriginalProcessedAddress(string accountId)
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			OriginalAddressModel = await testDataService.ReadByAccountId(accountId);
		}
		return OriginalAddressModel;
	}
	private void HandleInvalidSubmit() => isValidationSuccessful = false;
	private void UpdatePaymentFrequency(AddressModel.PaymentFrequency paymentFrequency)
	{
		if(AddressToBeInputModel is not null)
		{
			AddressToBeInputModel.GroundRentPaymentFrequency = paymentFrequency;
		}		

		if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
		{
			AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
			AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
			AddressToBeInputModel.PaymentDateQuarterly1 = null;
			AddressToBeInputModel.PaymentDateQuarterly2 = null;
			AddressToBeInputModel.PaymentDateQuarterly3 = null;
			AddressToBeInputModel.PaymentDateQuarterly4 = null;
			AddressToBeInputModel.PaymentDateOther = null;
		}
		else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
		{
			AddressToBeInputModel.PaymentDateAnnual = null;
			AddressToBeInputModel.PaymentDateQuarterly1 = null;
			AddressToBeInputModel.PaymentDateQuarterly2 = null;
			AddressToBeInputModel.PaymentDateQuarterly3 = null;
			AddressToBeInputModel.PaymentDateQuarterly4 = null;
			AddressToBeInputModel.PaymentDateOther = null;
		}
		else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
		{
			AddressToBeInputModel.PaymentDateAnnual = null;
			AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
			AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
			AddressToBeInputModel.PaymentDateOther = null;
		}
		else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
		{
			AddressToBeInputModel.PaymentDateAnnual = null;
			AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
			AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
			AddressToBeInputModel.PaymentDateQuarterly1 = null;
			AddressToBeInputModel.PaymentDateQuarterly2 = null;
			AddressToBeInputModel.PaymentDateQuarterly3 = null;
			AddressToBeInputModel.PaymentDateQuarterly4 = null;
		}
	}
	private async Task HandleOnSubmit()
	{
		if (IsSubmitting)
		{
			return;
		}

		isValidationSuccessful = true;
		IsSubmitting = true;
		AddressModel addressToDbModel = new();
		// If address has already been processed, it will now be verified
		if (AddressToBeInputModel?.IsProcessed is true)
		{
			addressToDbModel.AccountId = AddressToBeInputModel.AccountId;
			addressToDbModel.IsProcessed = AddressToBeInputModel.IsProcessed;
			addressToDbModel.UserWhoProcessed = AddressToBeInputModel.UserWhoProcessed;
			addressToDbModel.UserWhoVerified = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel.PaymentAmount;
			addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel.IsLegible;

			if (AddressToBeInputModel is not null && addressToDbModel.IsLegible is false)
			{
				addressToDbModel.NotLegibleType = null;
				addressToDbModel.NotVerifiedType = null;
			}
			// If there are any differences between the processed and verified address
			if (
				(OriginalAddressModel?.GroundRentPaymentFrequency != addressToDbModel.GroundRentPaymentFrequency) || 
				(OriginalAddressModel?.PaymentDateAnnual != addressToDbModel.PaymentDateAnnual) ||
				(OriginalAddressModel?.PaymentDateSemiAnnual1 != addressToDbModel.PaymentDateSemiAnnual1) ||
				(OriginalAddressModel?.PaymentDateSemiAnnual2 != addressToDbModel.PaymentDateSemiAnnual2) || 
				(OriginalAddressModel?.PaymentDateQuarterly1 != addressToDbModel.PaymentDateQuarterly1) ||
				(OriginalAddressModel?.PaymentDateQuarterly2 != addressToDbModel.PaymentDateQuarterly2) ||
				(OriginalAddressModel?.PaymentDateQuarterly3 != addressToDbModel.PaymentDateQuarterly3) ||
				(OriginalAddressModel?.PaymentDateQuarterly4 != addressToDbModel.PaymentDateQuarterly4) || 
				(OriginalAddressModel?.PaymentDateOther != addressToDbModel.PaymentDateOther) || 
				(OriginalAddressModel?.IsLegible != addressToDbModel.IsLegible) ||
				(OriginalAddressModel?.NotLegibleType != addressToDbModel.NotLegibleType) ||
				(OriginalAddressModel?.PaymentAmount != addressToDbModel.PaymentAmount))
			{
				AddressDataDifferencesUserWhoProcessedModel addressDataDifferencesUserWhoProcessedModel = new()
				{
					User = addressToDbModel.UserWhoProcessed
				};
				AddressDataDifferencesUserWhoVerifiedModel addressDataDifferencesUserWhoVerifiedModel = new()
				{
					User = addressToDbModel.UserWhoVerified
				};

				if (OriginalAddressModel?.GroundRentPaymentFrequency != addressToDbModel.GroundRentPaymentFrequency)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedGroundRentPaymentFrequency = OriginalAddressModel.GroundRentPaymentFrequency;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedGroundRentPaymentFrequency = addressToDbModel.GroundRentPaymentFrequency;
					addressToDbModel.GroundRentPaymentFrequency = AddressModel.PaymentFrequency.Blank;
				}
				if (OriginalAddressModel?.PaymentDateAnnual != addressToDbModel.PaymentDateAnnual)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateAnnual = OriginalAddressModel.PaymentDateAnnual;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateAnnual = addressToDbModel.PaymentDateAnnual;
					addressToDbModel.PaymentDateAnnual = null;
				}
				if (OriginalAddressModel?.PaymentDateSemiAnnual1 != addressToDbModel.PaymentDateSemiAnnual1)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateSemiAnnual1 = OriginalAddressModel.PaymentDateSemiAnnual1;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateSemiAnnual1 = addressToDbModel.PaymentDateSemiAnnual1;
					addressToDbModel.PaymentDateSemiAnnual1 = null;
				}
				if (OriginalAddressModel?.PaymentDateSemiAnnual2 != addressToDbModel.PaymentDateSemiAnnual2)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateSemiAnnual2 = OriginalAddressModel.PaymentDateSemiAnnual2;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateSemiAnnual2 = addressToDbModel.PaymentDateSemiAnnual2;
					addressToDbModel.PaymentDateSemiAnnual2 = null;
				}
				if (OriginalAddressModel?.PaymentDateQuarterly1 != addressToDbModel.PaymentDateQuarterly1)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateQuarterly1 = OriginalAddressModel.PaymentDateQuarterly1;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateQuarterly1 = addressToDbModel.PaymentDateQuarterly1;
					addressToDbModel.PaymentDateQuarterly1 = null;
				}
				if (OriginalAddressModel?.PaymentDateQuarterly2 != addressToDbModel.PaymentDateQuarterly2)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateQuarterly2 = OriginalAddressModel.PaymentDateQuarterly2;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateQuarterly2 = addressToDbModel.PaymentDateQuarterly2;
					addressToDbModel.PaymentDateQuarterly2 = null;
				}
				if (OriginalAddressModel?.PaymentDateQuarterly3 != addressToDbModel.PaymentDateQuarterly3)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateQuarterly3 = OriginalAddressModel.PaymentDateQuarterly3;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateQuarterly3 = addressToDbModel.PaymentDateQuarterly3;
					addressToDbModel.PaymentDateQuarterly3 = null;
				}
				if (OriginalAddressModel?.PaymentDateQuarterly4 != addressToDbModel.PaymentDateQuarterly4)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateQuarterly4 = OriginalAddressModel.PaymentDateQuarterly4;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateQuarterly4 = addressToDbModel.PaymentDateQuarterly4;
					addressToDbModel.PaymentDateQuarterly4 = null;
				}
				if (OriginalAddressModel?.PaymentDateOther != addressToDbModel.PaymentDateOther)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentDateOther = OriginalAddressModel.PaymentDateOther;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentDateOther = addressToDbModel.PaymentDateOther;
					addressToDbModel.PaymentDateOther = null;
				}
				if (OriginalAddressModel?.IsLegible != addressToDbModel.IsLegible)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedIsLegible = OriginalAddressModel.IsLegible;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedIsLegible = addressToDbModel.IsLegible;
					addressToDbModel.IsLegible = null;
				}
				if (OriginalAddressModel?.NotLegibleType != addressToDbModel.NotLegibleType)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedNotLegibleType = OriginalAddressModel.NotLegibleType;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedNotLegibleType = addressToDbModel.NotLegibleType;
					addressToDbModel.NotLegibleType = null;
				}
				if (OriginalAddressModel?.PaymentAmount != addressToDbModel.PaymentAmount)
				{
					addressDataDifferencesUserWhoProcessedModel.ProcessedPaymentAmount = OriginalAddressModel.PaymentAmount;
					addressDataDifferencesUserWhoVerifiedModel.VerifiedPaymentAmount = addressToDbModel.PaymentAmount;
					addressToDbModel.PaymentAmount = null;
				}

				AddressDataDifferencesUserModel addressDataDifferencesUserModel = new()
				{
					UserWhoProcessed = addressDataDifferencesUserWhoProcessedModel,
					UserWhoVerified = addressDataDifferencesUserWhoVerifiedModel
				};
				addressToDbModel.IsVerified = false;
				addressToDbModel.DataDifferencesJson = JsonSerializer.Serialize<AddressDataDifferencesUserModel>(addressDataDifferencesUserModel);
				using (var uow = dataContext.CreateUnitOfWork())
				{
					var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
					dataServiceResult = await testDataService.Update(addressToDbModel);
				}
			}
			else
			{
				addressToDbModel.IsVerified = true;
				using (var uow = dataContext.CreateUnitOfWork())
				{
					var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
					dataServiceResult = await testDataService.Update(addressToDbModel);
				}
			}
			if (dataServiceResult is true)
			{
				counter++;
			}
		}
		// If address has not yet been processed
		if (AddressToBeInputModel?.IsProcessed is null)
		{
			addressToDbModel.AccountId = AddressToBeInputModel?.AccountId;
			addressToDbModel.IsProcessed = true;
			addressToDbModel.UserWhoProcessed = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel?.PaymentAmount;
			if (AddressToBeInputModel?.GroundRentPaymentFrequency is not null)
			{
				addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
			}
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel?.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel?.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel?.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel?.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel?.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel?.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel?.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel?.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel?.IsLegible;

			if (addressToDbModel is not null && addressToDbModel.IsLegible is false)
			{
				addressToDbModel.NotLegibleType = null;
				addressToDbModel.NotVerifiedType = null;
			}

			using (var uow = dataContext.CreateUnitOfWork())
			{
				var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
				dataServiceResult = await testDataService.Update(addressToDbModel);
			}
			if (dataServiceResult is true)
			{
				counter++;
			}
		}

		IsSubmitting = false;
		isValidationSuccessful = false;
		await InvokeAsync(StateHasChanged);
		return;
	}
}
