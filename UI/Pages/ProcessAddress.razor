@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Models
@using UI.Pages.ProcessAddressComponents
@inject IDataContext dataContext
@inject IGroundRentPortalDataServiceFactory testDataServiceFactory
@inject ILogger<ProcessAddress> logger
@attribute [Authorize]
@page "/processaddress"
@namespace UI.Pages

@if (userState is not null && addressesLoaded)
{
	<div class="container">
		<div hidden="@addressSubmitted">
			<EditForm Model="AddressToBeInputModel" OnValidSubmit="HandleOnSubmit" OnInvalidSubmit="HandleInvalidSubmit">
				<DataAnnotationsValidator />
				<MudText>@userState.User.Identity?.Name is currently processing @AddressToBeInputModel?.AccountId</MudText>
				<MudText Color="Color.Primary">Addresses are loaded.</MudText>
				<PaymentAmountField AddressToBeInputModel="AddressToBeInputModel" />
				<PaymentFrequencyField AddressToBeInputModel="AddressToBeInputModel" />
				<DataLegibleRadio AddressToBeInputModel="AddressToBeInputModel" />
				<FormSubmitButton />
				@if (isValidationSuccessful)
				{
					<MudText Color="Color.Success" Typo="Typo.caption">Form submission successful!</MudText>
				}
				<MudText Color="Color.Error" Typo="Typo.body2">
					<ValidationSummary />
				</MudText>
			</EditForm>
		</div>
	</div>	
}
else
{
	<MudText Color="Color.Error">You are not authorized. Please log in or contact your manager.</MudText>
}

@code {
	private ValidationMessageStore? validationMessageStore;
	private bool isValidationSuccessful { get; set; }
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	private AuthenticationState? userState;
	[Parameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	public AddressModel? OriginalAddressModel { get; set; }
	private List<AddressModel> UnprocessedAddressList = new();
	private List<AddressModel> UnverifiedAddressList = new();
	private List<AddressModel> AddressList = new();


	[Parameter]
	public EventCallback AddressProcessed { get; set; }
	private int UnprocessedAddressListAmount { get; set; } = 100;
	private int UnverifiedAddressListAmount;
	private bool addressesLoaded { get; set; } = false;
	private bool addressSubmitted { get; set; } = false;
	private bool isSubmitting { get; set; } = false;
	private enum IsLegibleRadio { Yes, No }
	private IsLegibleRadio isLegibleRadio;
	private bool dataServiceResult { get; set; }
	private bool paymentFrequencyAnnual { get; set; }
	private bool paymentFrequencySemiAnnual { get; set; }
	private bool paymentFrequencyQuarterly { get; set; }
	private bool paymentFrequencyOther { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			AddressToBeInputModel = new();

			if (authenticationState is not null)
			{
				userState = await authenticationState;
			}
			await LoadAddressList();
			addressesLoaded = true;
			foreach (var address in AddressList)
			{
				AddressToBeInputModel = address;
				OriginalAddressModel = await LoadOriginalProcessedAddress(address.AccountId);
			}
			StateHasChanged();
		}
		catch (Exception ex)
		{
			logger.LogError($"Exception thrown during initilaztion {ex.Message}");
		}
	}

	private void CalculateListAmounts()
	{
		double percentage = UnprocessedAddressListAmount * 0.1;
		UnverifiedAddressListAmount = (int)Math.Round(percentage, MidpointRounding.AwayFromZero);
	}

	private async Task LoadAddressList()
	{
		addressesLoaded = false;
		AddressList = new();
		UnprocessedAddressList = await LoadUnprocessedAddresses();
		UnverifiedAddressList = await LoadUnverifiedAddresses();
		AddressList.AddRange(UnprocessedAddressList);
		AddressList.AddRange(UnverifiedAddressList);
		UnprocessedAddressList = new();
		UnverifiedAddressList = new();
	}

	private async Task<List<AddressModel>> LoadUnprocessedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnprocessedAddressList = await testDataService.ReadByCountyWhereIsLegibleTrueAndIsProcessedFalse(UnprocessedAddressListAmount, "BaltimoreCity");
		}
		return UnprocessedAddressList;
	}

	private async Task<List<AddressModel>> LoadUnverifiedAddresses()
	{
		CalculateListAmounts();
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnverifiedAddressList = await testDataService.ReadByVerificationPercentageWhereIsLegibleTrueAndIsProcessedTrue(UnverifiedAddressListAmount);
		}
		return UnverifiedAddressList;
	}
	private async Task<AddressModel> LoadOriginalProcessedAddress(string accountId)
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			OriginalAddressModel = await testDataService.ReadByAccountId(accountId);
		}
		return OriginalAddressModel;
	}

	private void HandleInvalidSubmit() => isValidationSuccessful = false;

	private async Task HandleOnSubmit()
	{
		isValidationSuccessful = true;

		if (isSubmitting)
		{			
			return;
		}

		isSubmitting = true;
		AddressModel addressToDbModel = new();
		string differencesNotesToDb = "";
		// If address has already been processed, it will now be verified
		if (AddressToBeInputModel?.IsProcessed is true)
		{
			addressToDbModel.AccountId = AddressToBeInputModel.AccountId;
			addressToDbModel.IsProcessed = AddressToBeInputModel.IsProcessed;
			addressToDbModel.IsVerified = true;
			addressToDbModel.UserWhoProcessed = AddressToBeInputModel.UserWhoProcessed;
			addressToDbModel.UserWhoVerified = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel.PaymentAmount;
			addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel.IsLegible;
			addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;

			if (OriginalAddressModel.GroundRentPaymentFrequency != addressToDbModel.GroundRentPaymentFrequency)
			{
				addressToDbModel.IsVerified = false;
				addressToDbModel.GroundRentPaymentFrequency = AddressModel.PaymentFrequency.Blank;
			}
			if (OriginalAddressModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Annual Date as {OriginalAddressModel.PaymentDateAnnual}. {addressToDbModel.UserWhoVerified} input Payment Frequency Annual Date as {addressToDbModel.PaymentDateAnnual}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateSemiAnnual1 != addressToDbModel.PaymentDateSemiAnnual1)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Semi-Annual1 Date as {OriginalAddressModel.PaymentDateSemiAnnual1}. {addressToDbModel.UserWhoVerified} input Payment Frequency Semi-Annual1 Date as {addressToDbModel.PaymentDateSemiAnnual1}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateSemiAnnual2 != addressToDbModel.PaymentDateSemiAnnual2)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Semi-Annual2 Date as {OriginalAddressModel.PaymentDateSemiAnnual2}. {addressToDbModel.UserWhoVerified} input Payment Frequency Semi-Annual2 Date as {addressToDbModel.PaymentDateSemiAnnual2}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateQuarterly1 != addressToDbModel.PaymentDateQuarterly1)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Quarterly1 Date as {OriginalAddressModel.PaymentDateQuarterly1}. {addressToDbModel.UserWhoVerified} input Payment Frequency Quarterly1 Date as {addressToDbModel.PaymentDateQuarterly1}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateQuarterly2 != addressToDbModel.PaymentDateQuarterly2)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Quarterly2 Date as {OriginalAddressModel.PaymentDateQuarterly2}. {addressToDbModel.UserWhoVerified} input Payment Frequency Quarterly2 Date as {addressToDbModel.PaymentDateQuarterly2}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateQuarterly3 != addressToDbModel.PaymentDateQuarterly3)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Quarterly3 Date as {OriginalAddressModel.PaymentDateQuarterly3}. {addressToDbModel.UserWhoVerified} input Payment Frequency Quarterly3 Date as {addressToDbModel.PaymentDateQuarterly3}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentDateQuarterly4 != addressToDbModel.PaymentDateQuarterly4)
			{
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Frequency Quarterly4 Date as {OriginalAddressModel.PaymentDateQuarterly4}. {addressToDbModel.UserWhoVerified} input Payment Frequency Quarterly4 Date as {addressToDbModel.PaymentDateQuarterly4}." + Environment.NewLine;
			}
			if (OriginalAddressModel.IsLegible != addressToDbModel.IsLegible)
			{
				addressToDbModel.IsVerified = false;
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} selected IsLegible as {OriginalAddressModel.IsLegible}. {addressToDbModel.UserWhoVerified} selected IsLegible as {addressToDbModel.IsLegible}." + Environment.NewLine;
			}
			if (OriginalAddressModel.PaymentAmount != addressToDbModel.PaymentAmount)
			{
				addressToDbModel.IsVerified = false;
				differencesNotesToDb += $"{addressToDbModel.UserWhoProcessed} input Payment Amount as {OriginalAddressModel.PaymentAmount}. {addressToDbModel.UserWhoVerified} input Payment Amount as {addressToDbModel.PaymentAmount}." + Environment.NewLine;
			}

			addressToDbModel.DifferencesNotesToDb = differencesNotesToDb;
			using (var uow = dataContext.CreateUnitOfWork())
			{
				var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
				dataServiceResult = await testDataService.Update(addressToDbModel);
			}
		}
		// If address has not yet been processed
		if (AddressToBeInputModel?.IsProcessed is null)
		{
			addressToDbModel.AccountId = AddressToBeInputModel?.AccountId;
			addressToDbModel.IsProcessed = true;
			addressToDbModel.UserWhoProcessed = userState?.User.Identity?.Name;
			addressToDbModel.PaymentAmount = AddressToBeInputModel?.PaymentAmount;
			addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
			addressToDbModel.PaymentDateAnnual = AddressToBeInputModel?.PaymentDateAnnual;
			addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel?.PaymentDateSemiAnnual1;
			addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel?.PaymentDateSemiAnnual2;
			addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel?.PaymentDateQuarterly1;
			addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel?.PaymentDateQuarterly2;
			addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel?.PaymentDateQuarterly3;
			addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel?.PaymentDateQuarterly4;
			addressToDbModel.PaymentDateOther = AddressToBeInputModel?.PaymentDateOther;
			addressToDbModel.IsLegible = AddressToBeInputModel?.IsLegible;
			addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;

			using (var uow = dataContext.CreateUnitOfWork())
			{
				var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
				dataServiceResult = await testDataService.Update(addressToDbModel);
			}
		}
		isSubmitting = false;
		StateHasChanged();
		return;
	}

	private void EditContextAddressOnFieldChanged(object sender, FieldChangedEventArgs e)
	{
		AddressProcessed.InvokeAsync();
	}
	
}
