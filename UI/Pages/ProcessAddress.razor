@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Models
@using UI.Pages.ProcessAddressComponents
@inject IDataContext dataContext
@inject IGroundRentPortalDataServiceFactory testDataServiceFactory
@inject ILogger<ProcessAddress> logger
@attribute [Authorize]
@page "/processaddress"
@namespace UI.Pages

@if (userState is not null)
{
	@if (addressesLoaded)
	{
		<p>Addresses are loaded.</p>
		<div class="container">
			<div hidden="@addressSubmitted">
				<EditForm Model="AddressToBeInputModel" OnValidSubmit="HandleOnSubmit" OnInvalidSubmit="HandleInvalidSubmit">
					<DataAnnotationsValidator />
					<MudText Color="Color.Error" Typo="Typo.body2">
						<ValidationSummary />
					</MudText>
					<div class="row">
						<div class="col gy-3">
							<label>@userState.User.Identity?.Name is currently processing @AddressToBeInputModel?.AccountId</label>
						</div>
					</div>

					<PaymentAmountField AddressToBeInputModel="AddressToBeInputModel" />
					<PaymentFrequencyField AddressToBeInputModel="AddressToBeInputModel" />
					<DataLegibleRadio AddressToBeInputModel="AddressToBeInputModel" AddressProcessed="AddressProcessed" EditContext="editContext" />
					<FormSubmitButton />
					@if (isValidationSuccessful)
					{
						<MudText Color="Color.Success" Typo="Typo.body2">Successful!</MudText>
					}					
				</EditForm>
			</div>
		</div>
	}
	else
	{
		<p>Loading addresses...</p>
	}
}
else
{
	<p>You are not authorized. Please log in or contact your manager.</p>
}

@code {
	private EditContext? editContext;
	private ValidationMessageStore? validationMessageStore;
	private bool isValidationSuccessful { get; set; }
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	private AuthenticationState? userState;
	[Parameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	private List<AddressModel> UnprocessedAddressList = new();
	private List<AddressModel> UnverifiedAddressList = new();
	private List<AddressModel> AddressList = new();


	[Parameter]
	public EventCallback AddressProcessed { get; set; }
	private int UnprocessedAddressListAmount { get; set; } = 100;
	private int UnverifiedAddressListAmount;
	private bool addressesLoaded { get; set; } = false;
	private bool addressSubmitted { get; set; } = false;
	private bool isSubmitting { get; set; } = false;
	private enum IsLegibleRadio { Yes, No }
	private IsLegibleRadio isLegibleRadio;
	private bool dataServiceResult { get; set; }
	private bool paymentFrequencyAnnual { get; set; }
	private bool paymentFrequencySemiAnnual { get; set; }
	private bool paymentFrequencyQuarterly { get; set; }
	private bool paymentFrequencyOther { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			AddressToBeInputModel = new();

			if (authenticationState is not null)
			{
				userState = await authenticationState;
			}

			if (AddressToBeInputModel is not null)
			{
				editContext = new(AddressToBeInputModel);
			}

			if (editContext is not null)
			{
				editContext.OnFieldChanged += EditContextPaymentFrequencyOnFieldChanged;
				validationMessageStore = new(editContext);
				editContext.OnValidationRequested += (s, e) => validationMessageStore.Clear();
				editContext.NotifyValidationStateChanged();
				validationMessageStore.Clear();
			}

			CalculateListAmounts();
			await LoadAddressList();
			addressesLoaded = true;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			logger.LogError($"Exception thrown during initilaztion {ex.Message}");
		}
	}

	private void CalculateListAmounts()
	{
		double percentage = UnprocessedAddressListAmount * 0.1;
		UnverifiedAddressListAmount = (int)Math.Round(percentage, MidpointRounding.AwayFromZero);
	}

	private async Task LoadAddressList()
	{
		addressesLoaded = false;
		AddressList = new();
		UnprocessedAddressList = await LoadUnprocessedAddresses();
		UnverifiedAddressList = await LoadUnverifiedAddresses();
		AddressList.AddRange(UnprocessedAddressList);
		AddressList.AddRange(UnverifiedAddressList);
		UnprocessedAddressList = new();
		UnverifiedAddressList = new();

		foreach (var address in AddressList)
		{
			AddressToBeInputModel = address;
		}

		addressesLoaded = true;
	}

	private async Task<List<AddressModel>> LoadUnprocessedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnprocessedAddressList = await testDataService.ReadByCountyWhereIsLegibleTrueAndIsProcessedFalse(UnprocessedAddressListAmount, "BaltimoreCity");
		}

		return UnprocessedAddressList;
	}

	private async Task<List<AddressModel>> LoadUnverifiedAddresses()
	{
		using (var uow = dataContext.CreateUnitOfWork())
		{
			var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
			UnverifiedAddressList = await testDataService.ReadByVerificationPercentageWhereIsLegibleTrueAndIsProcessedTrue(UnverifiedAddressListAmount);
		}

		return UnverifiedAddressList;
	}

	private void HandleInvalidSubmit() =>
		isValidationSuccessful = false;

	private async Task HandleOnSubmit()
	{
		isValidationSuccessful = true;

		if (isSubmitting)
		{			
			return;
		}

		if (editContext is not null && editContext.Validate())
		{
			isSubmitting = true;
			AddressModel addressToDbModel = new();
			if (AddressToBeInputModel?.IsProcessed is true)
			{
				addressToDbModel.AccountId = AddressToBeInputModel.AccountId;
				addressToDbModel.IsVerified = true;
				addressToDbModel.UserWhoVerified = userState?.User.Identity?.Name;
				addressToDbModel.PaymentAmount = AddressToBeInputModel.PaymentAmount;
				addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
				addressToDbModel.PaymentDateAnnual = AddressToBeInputModel.PaymentDateAnnual;
				addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel.PaymentDateSemiAnnual1;
				addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel.PaymentDateSemiAnnual2;
				addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel.PaymentDateQuarterly1;
				addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel.PaymentDateQuarterly2;
				addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel.PaymentDateQuarterly3;
				addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel.PaymentDateQuarterly4;
				addressToDbModel.PaymentDateOther = AddressToBeInputModel.PaymentDateOther;
				addressToDbModel.IsLegible = AddressToBeInputModel.IsLegible;
				addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;

				using (var uow = dataContext.CreateUnitOfWork())
				{
					var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
					dataServiceResult = await testDataService.Update(addressToDbModel);
				}
				if (dataServiceResult is false)
				{
					validationMessageStore?.Add(editContext.Field(""), "Could not process.");
				}
			}
			if (AddressToBeInputModel?.IsProcessed is false)
			{
				addressToDbModel.AccountId = AddressToBeInputModel.AccountId;
				addressToDbModel.IsProcessed = true;
				addressToDbModel.UserWhoProcessed = userState?.User.Identity?.Name;
				addressToDbModel.PaymentAmount = AddressToBeInputModel.PaymentAmount;
				addressToDbModel.GroundRentPaymentFrequency = AddressToBeInputModel.GroundRentPaymentFrequency;
				addressToDbModel.PaymentDateAnnual = AddressToBeInputModel.PaymentDateAnnual;
				addressToDbModel.PaymentDateSemiAnnual1 = AddressToBeInputModel.PaymentDateSemiAnnual1;
				addressToDbModel.PaymentDateSemiAnnual2 = AddressToBeInputModel.PaymentDateSemiAnnual2;
				addressToDbModel.PaymentDateQuarterly1 = AddressToBeInputModel.PaymentDateQuarterly1;
				addressToDbModel.PaymentDateQuarterly2 = AddressToBeInputModel.PaymentDateQuarterly2;
				addressToDbModel.PaymentDateQuarterly3 = AddressToBeInputModel.PaymentDateQuarterly3;
				addressToDbModel.PaymentDateQuarterly4 = AddressToBeInputModel.PaymentDateQuarterly4;
				addressToDbModel.PaymentDateOther = AddressToBeInputModel.PaymentDateOther;
				addressToDbModel.IsLegible = AddressToBeInputModel.IsLegible;
				addressToDbModel.NotLegibleType = AddressToBeInputModel.NotLegibleType;

				using (var uow = dataContext.CreateUnitOfWork())
				{
					var testDataService = testDataServiceFactory.CreateAddressDataService(uow);
					dataServiceResult = await testDataService.Update(addressToDbModel);
				}
				if (dataServiceResult is false)
				{
					validationMessageStore?.Add(editContext.Field(""), "Could not process.");
				}
			}
			editContext.NotifyValidationStateChanged();
			isSubmitting = false;
			this.StateHasChanged();
			return;
		}
	}
	private void IsLegibleRadioSelect()
	{
		if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.Yes)
		{
			AddressToBeInputModel.IsLegible = true;
		}

		if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.No)
		{
			AddressToBeInputModel.IsLegible = false;
		}

		if (editContext is not null)
		{
			editContext.OnFieldChanged += EditContextAddressOnFieldChanged;
		}
	}

	private void NotLegibleTypeSelect()
	{
		if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.No)
		{
			AddressToBeInputModel.NotLegibleType = AddressModel.NotLegible.Other;
		}

		if (editContext is not null)
		{
			editContext.OnFieldChanged += EditContextAddressOnFieldChanged;
		}
	}

	private void EditContextAddressOnFieldChanged(object sender, FieldChangedEventArgs e)
	{
		AddressProcessed.InvokeAsync();
	}

	private void EditContextPaymentFrequencyOnFieldChanged(object sender, FieldChangedEventArgs e)
	{
		if (e.FieldIdentifier.FieldName == "GroundRentPaymentFrequency")
		{
			if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
			{
				TogglePaymentFrequencyAnnual();
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
			{
				TogglePaymentFrequencySemiAnnual();
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
			{
				TogglePaymentFrequencyQuarterly();
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
			{
				TogglePaymentFrequencyOther();
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
			}
		}
	}
	private void TogglePaymentFrequencyAnnual()
	{
		paymentFrequencyAnnual = true;
		paymentFrequencySemiAnnual = false;
		paymentFrequencyQuarterly = false;
		paymentFrequencyOther = false;
	}
	private void TogglePaymentFrequencySemiAnnual()
	{
		paymentFrequencyAnnual = false;
		paymentFrequencySemiAnnual = true;
		paymentFrequencyQuarterly = false;
		paymentFrequencyOther = false;
	}
	private void TogglePaymentFrequencyQuarterly()
	{
		paymentFrequencyAnnual = false;
		paymentFrequencySemiAnnual = false;
		paymentFrequencyQuarterly = true;
		paymentFrequencyOther = false;
	}
	private void TogglePaymentFrequencyOther()
	{
		paymentFrequencyAnnual = false;
		paymentFrequencySemiAnnual = false;
		paymentFrequencyQuarterly = false;
		paymentFrequencyOther = true;
	}
}
