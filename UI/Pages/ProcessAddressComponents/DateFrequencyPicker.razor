@using DataLibrary.Models
@namespace UI.Pages.ProcessAddressComponents

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
{
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker Variant="Variant.Outlined" Placeholder="*Annual Date" @bind-Date="AddressToBeInputModel.PaymentDateAnnual"
                   For="@(() => AddressToBeInputModel.PaymentDateAnnual)" Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateAnnual" Required />
    </div>
    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null && AddressToBeInputModel.IsLegible is false
          && AddressToBeInputModel?.NotLegibleType == AddressModel.InputType.PaymentDateAnnual)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">Annual Date is disabled as it is selected as 'Not Legible'.</MudText>
    }
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
{
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateSemiAnnual1" Placeholder="*Semi-Annual 1 Date" Variant="Variant.Outlined"
                   For="@(() => AddressToBeInputModel.PaymentDateSemiAnnual1)" Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateSemiAnnual1" Required />
    </div>

    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateSemiAnnual2" Placeholder="*Semi-Annual 2 Date" Variant="Variant.Outlined"
                   For="@(() => AddressToBeInputModel.PaymentDateSemiAnnual2)" Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateSemiAnnual2" Required />
    </div>
    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                                              && AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateSemiAnnual1)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">Semi-Annual Date 1 is disabled as it is selected as 'Not Legible'.</MudText>
    }

    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                      && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateSemiAnnual2)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">Semi-Annual Date 2 is disabled as it is selected as 'Not Legible'.</MudText>
    }
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
{
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Color="Color.Default" Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly1" Variant="Variant.Outlined" Placeholder="*Quarterly 1 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly1)"
                   Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly1" Required />
    </div>
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Color="Color.Default" Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly2" Variant="Variant.Outlined" Placeholder="*Quarterly 2 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly2)"
                   Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly2" Required />
    </div>
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Color="Color.Default" Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly3" Variant="Variant.Outlined" Placeholder="*Quarterly 3 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly3)"
                   Disabled="AddressToBeInputModel.IsLegible is false &&  AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly3" Required />
    </div>
    <div class="col gy-3" style="max-width: fit-content;">
        <MudText Color="Color.Default" Typo="Typo.caption">Please select a date:</MudText>
        <MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly4" Variant="Variant.Outlined" Placeholder="*Quarterly 4 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly4)"
                   Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly4" Required />
    </div>

    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                          && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly1)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">PaymentDateQuarterly1 is disabled as it is not legible.</MudText>
    }
    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                              && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly2)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">PaymentDateQuarterly2 is disabled as it is not legible.</MudText>
    }
    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                              && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly3)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">PaymentDateQuarterly3 is disabled as it is not legible.</MudText>
    }
    @if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null
                              && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateQuarterly4)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">PaymentDateQuarterly4 is disabled as it is not legible.</MudText>
    }
}


@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
{
    <div class="col gy-3" style="max-width: 15em;">
        <MudText>Other Date:</MudText>
        <MudInputString OnBlur="UpdateCharactersLeftEmpty" OnKeyDown="CalculateCharactersLeft" @bind-Value="AddressToBeInputModel.PaymentDateOther" Variant="Variant.Outlined"
                    For="@(() => AddressToBeInputModel.PaymentDateOther)" Placeholder="1/4/2023" MaxLength="maxCharacterLengthOther"
                    Disabled="AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateOther" Required />
        <MudText>Characters left: @charactersLeft</MudText>
    </div>
    @if (AddressToBeInputModel.IsLegible is false && AddressToBeInputModel.NotLegibleType == AddressModel.InputType.PaymentDateOther)
    {
        <MudText Color="Color.Default" Typo="Typo.caption">PaymentDateOther is 'disabled' due to not legible value.</MudText>
    }
}

@code {
    [CascadingParameter]
    public AddressModel? AddressToBeInputModel { get; set; }
    private int maxCharacterLengthOther { get; set; } = 64;
    private int charactersLeft { get; set; }

    protected override void OnInitialized()
    {
        charactersLeft = maxCharacterLengthOther;
        base.OnInitialized();
    }

    private void CalculateCharactersLeft(KeyboardEventArgs args)
    {
        if (AddressToBeInputModel?.PaymentDateOther is not null)
        {
            var previousCharacterCount = AddressToBeInputModel.PaymentDateOther.Length;

            if (args.Key != "Backspace" && AddressToBeInputModel.PaymentDateOther.Length <= previousCharacterCount)
            {
                charactersLeft--;
            }
            else if (args.Key == "Backspace" && AddressToBeInputModel.PaymentDateOther.Length > 0)
            {
                charactersLeft++;
            }

            if (AddressToBeInputModel.PaymentDateOther.Length == 0)
            {
                charactersLeft = maxCharacterLengthOther;
            }
        }        
    }

    private void UpdateCharactersLeftEmpty()
    {
        if (AddressToBeInputModel?.PaymentDateOther is not null && AddressToBeInputModel.PaymentDateOther.Length == 0)
        {
            charactersLeft = maxCharacterLengthOther;
        }
    }

}
