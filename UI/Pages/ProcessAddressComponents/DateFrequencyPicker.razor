@using DataLibrary.Models
@namespace UI.Pages.ProcessAddressComponents

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
{
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker Variant="Variant.Outlined" Label="Annual Date" @onfocusout="CheckDisabledStatus" @bind-Date="AddressToBeInputModel.PaymentDateAnnual"
				   For="@(() => AddressToBeInputModel.PaymentDateAnnual)" Disabled="isDisabled" Required />
	</div>
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null 
	&& AddressToBeInputModel.NotLegibleType == DataLibrary.Models.AddressModel.InputType.PaymentDateAnnual)
{
	<MudText>Annual Date is disabled as it is not legible.</MudText>
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
{
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateSemiAnnual1" Label="Semi-Annual 1 Date" Variant="Variant.Outlined" For="@(() => AddressToBeInputModel.PaymentDateSemiAnnual1)" Required />
	</div>
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateSemiAnnual2" Label="Semi-Annual 2 Date" Variant="Variant.Outlined" For="@(() => AddressToBeInputModel.PaymentDateSemiAnnual2)" Required />
	</div>
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
{
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly1" Variant="Variant.Outlined" Label="Quarterly 1 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly1)" Required />
	</div>
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly2" Variant="Variant.Outlined" Label="Quarterly 2 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly2)" Required />
	</div>
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly3" Variant="Variant.Outlined" Label="Quarterly 3 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly3)" Required />
	</div>
	<div class="col gy-3" style="max-width: fit-content;">
		<MudText Typo="Typo.caption">Please select a date:</MudText>
		<MudDatePicker @bind-Date="AddressToBeInputModel.PaymentDateQuarterly4" Variant="Variant.Outlined" Label="Quarterly 4 Date" For="@(() => AddressToBeInputModel.PaymentDateQuarterly4)" Required />
	</div>
}

@if (AddressToBeInputModel is not null && AddressToBeInputModel.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
{
	<div class="col gy-3" style="max-width: 15em;">
		<MudText>Other Date</MudText>
		<MudTooltip Text="Please enter other date or item needed." Arrow="true" Placement="Placement.End">
			<MudInputString OnKeyPress="CalculateCharactersLeft" @bind-Value="AddressToBeInputModel.PaymentDateOther" Variant="Variant.Outlined"
						For="@(() => AddressToBeInputModel.PaymentDateOther)" Placeholder="1/4/2023" MaxLength="maxCharacterLengthOther" Required />
		</MudTooltip>
		<MudText>Characters left: @charactersLeft</MudText>
	</div>
}

@code {
	[CascadingParameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	private int maxCharacterLengthOther { get; set; }
	private int charactersLeft { get; set; } = 64;
	private bool isDisabled { get; set; }
	private void CalculateCharactersLeft()
	{
		if (AddressToBeInputModel?.PaymentDateOther is not null)
		{
			charactersLeft = maxCharacterLengthOther - AddressToBeInputModel.PaymentDateOther.Length;
		}
	}

	private void CheckDisabledStatus()
	{
		if (AddressToBeInputModel is not null && AddressToBeInputModel.NotLegibleType is not null 
			&& AddressToBeInputModel.NotLegibleType == DataLibrary.Models.AddressModel.InputType.PaymentDateAnnual)
		{
			isDisabled = true;
		}else
		{
			isDisabled = false;
		}
	}

}
