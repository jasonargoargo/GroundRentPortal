@using DataLibrary.Models
@namespace UI.Pages.ProcessAddressComponents

<div class="row">
	<div class="col gy-3">
		<p>Is data legible?</p>
		<MudRadioGroup @bind-SelectedOption="isLegibleRadio" Class="form-control" @onselect="IsLegibleRadioSelect" Required>
			<MudRadio Option="IsLegibleRadio.Yes" Color="Color.Primary">Yes</MudRadio>
			<MudRadio Option="IsLegibleRadio.No" Color="Color.Primary">No</MudRadio>
		</MudRadioGroup>
	</div>
</div>

@if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.No)
{
	<div class="row">
		<div class="col gy-3">
			<MudSelect T="AddressModel.NotLegible" Variant="Variant.Filled" Label="What information is illegible?" @bind-Value="AddressToBeInputModel.NotLegibleType" Class="form-select" onselect="">
				@foreach (AddressModel.NotLegible option in Enum.GetValues(typeof(AddressModel.NotLegible)))
				{
					<MudSelectItem T="AddressModel.NotLegible" Value="@option">@option</MudSelectItem>
				}
			</MudSelect>
		</div>
	</div>
}

@code {
	[Parameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	[Parameter]
	public EditContext? EditContext { get; set; }
	[Parameter]
	public EventCallback AddressProcessed { get; set; }
	private enum IsLegibleRadio { Yes, No }
	private IsLegibleRadio isLegibleRadio;

	private void IsLegibleRadioSelect()
	{
		if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.Yes)
		{
			AddressToBeInputModel.IsLegible = true;
		}

		if (AddressToBeInputModel is not null && isLegibleRadio == IsLegibleRadio.No)
		{
			AddressToBeInputModel.IsLegible = false;
		}

		if (EditContext is not null)
		{
			EditContext.OnFieldChanged += EditContextAddressOnFieldChanged;
		}
	}

	private void EditContextAddressOnFieldChanged(object sender, FieldChangedEventArgs e)
	{
		AddressProcessed.InvokeAsync();
	}
}
