@using DataLibrary.Models
@namespace UI.Pages.ProcessAddressComponents

<div class="row">
	<div class="col gy-3">
		<MudText>Is data legible?</MudText>
		@if (AddressToBeInputModel is not null)
		{
			<MudRadioGroup T="bool?" @bind-SelectedOption="AddressToBeInputModel.IsLegible" For="@(() => AddressToBeInputModel.IsLegible)" Required>
				<MudRadio Option="(bool?)true" Color="Color.Primary">Yes</MudRadio>
				<MudRadio Option="(bool?)false" Color="Color.Primary">No</MudRadio>
			</MudRadioGroup>
		}		
	</div>
</div>

@if (AddressToBeInputModel is not null && AddressToBeInputModel.IsLegible == false)
{
	<div class="row">
		<div class="col gy-3">
			<MudSelect Variant="Variant.Filled" ValueChanged="OnNotLegibleTypeChanged"
				Label="What is illegible?" 
				Style="max-width: fit-content;">
				<MudSelectItem Value="@AddressModel.InputType.Blank"></MudSelectItem>
				<MudSelectItem Value="@AddressModel.InputType.PaymentAmount">Payment Amount</MudSelectItem>
				<MudSelectItem Value="@AddressModel.InputType.PaymentFrequency">Payment Frequency</MudSelectItem>
				<MudSelectItem Value="@AddressModel.InputType.PaymentDate">Payment Date</MudSelectItem>
			</MudSelect>
		</div>
	</div>
}

@code {
	[CascadingParameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	[Parameter]
	public EventCallback<AddressModel.InputType> OnNotLegibleTypeChanged { get; set; }
	protected override void OnInitialized()
	{
		if (AddressToBeInputModel is not null)
		{
			AddressToBeInputModel.NotLegibleType = AddressModel.InputType.Blank;
		}
		base.OnInitialized();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
	}
}
