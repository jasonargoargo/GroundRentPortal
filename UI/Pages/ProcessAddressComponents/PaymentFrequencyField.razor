@using DataLibrary.Models
@namespace UI.Pages.ProcessAddressComponents

<div class="col gy-3">
	<MudText>Payment Frequency</MudText>
	@if (AddressToBeInputModel is not null)
	{
		<MudSelect Variant="Variant.Filled" ValueChanged="OnPaymentFrequencyChanged"
			   Style="max-width: fit-content;" Required>
			<MudSelectItem Value="@AddressModel.PaymentFrequency.Blank"></MudSelectItem>
			<MudSelectItem Value="@AddressModel.PaymentFrequency.Annual">Annual</MudSelectItem>
			<MudSelectItem Value="@AddressModel.PaymentFrequency.SemiAnnual">Semi-Annual</MudSelectItem>
			<MudSelectItem Value="@AddressModel.PaymentFrequency.Quarterly">Quarterly</MudSelectItem>
			<MudSelectItem Value="@AddressModel.PaymentFrequency.Other">Other</MudSelectItem>
		</MudSelect>
	}
</div>

<CascadingValue Value="AddressToBeInputModel">
	<DateFrequencyPicker />
</CascadingValue>

@code {
	[CascadingParameter]
	public AddressModel? AddressToBeInputModel { get; set; }
	[Parameter]
	public EventCallback<AddressModel.PaymentFrequency> OnPaymentFrequencyChanged { get; set; }

	protected override void OnInitialized()
	{
		if (AddressToBeInputModel is not null)
		{
			AddressToBeInputModel.GroundRentPaymentFrequency = AddressModel.PaymentFrequency.Blank;
		}
		base.OnInitialized();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Blank)
			{
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Annual)
			{
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.SemiAnnual)
			{
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Quarterly)
			{
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateOther = null;
			}
			else if (AddressToBeInputModel?.GroundRentPaymentFrequency == AddressModel.PaymentFrequency.Other)
			{
				AddressToBeInputModel.PaymentDateAnnual = null;
				AddressToBeInputModel.PaymentDateSemiAnnual1 = null;
				AddressToBeInputModel.PaymentDateSemiAnnual2 = null;
				AddressToBeInputModel.PaymentDateQuarterly1 = null;
				AddressToBeInputModel.PaymentDateQuarterly2 = null;
				AddressToBeInputModel.PaymentDateQuarterly3 = null;
				AddressToBeInputModel.PaymentDateQuarterly4 = null;
			}
			await InvokeAsync(StateHasChanged);
		}
		await base.OnAfterRenderAsync(firstRender);
	}
}
